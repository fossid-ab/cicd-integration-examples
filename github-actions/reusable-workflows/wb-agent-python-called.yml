name: FossID Workbench Agent - Reusable Workflow

on:
  workflow_call:
    secrets:
      WORKBENCH_URL:
        required: true
      WORKBENCH_USER:
        required: true
      WORKBENCH_TOKEN:
        required: true
    inputs:
      # Required parameters
      project_code:
        description: 'Name of the project inside Workbench where the scan will be created'
        required: true
        type: string
      scan_code:
        description: 'The scan code used when creating the scan in Workbench'
        required: true
        type: string
      scan_number_of_tries:
        description: 'Number of calls to check_status till declaring the scan failed'
        required: false
        default: '60'
        type: string
      scan_wait_time:
        description: 'Time interval between calling check_status, in seconds'
        required: false
        default: '30'
        type: string
      
      # Optional parameters
      limit:
        description: 'Limits CLI results to N most significant matches'
        required: false
        default: '10'
        type: string
      sensitivity:
        description: 'Sets snippet sensitivity to a minimum of N lines'
        required: false
        default: '10'
        type: string
      recursively_extract_archives:
        description: 'Recursively extract nested archives'
        required: false
        default: 'false'
        type: string
      jar_file_extraction:
        description: 'Control default behavior related to extracting jar files'
        required: false
        default: 'false'
        type: string
      blind_scan:
        description: 'Call CLI and generate file hashes. Upload hashes and initiate blind scan'
        required: false
        default: 'false'
        type: string
      run_dependency_analysis:
        description: 'Initiate dependency analysis after finishing scanning for matches in KB'
        required: false
        default: 'false'
        type: string
      run_only_dependency_analysis:
        description: 'Scan only for dependencies, no results from KB'
        required: false
        default: 'false'
        type: string
      auto_identification_detect_declaration:
        description: 'Automatically detect license declaration inside files'
        required: false
        default: 'false'
        type: string
      auto_identification_detect_copyright:
        description: 'Automatically detect copyright statements inside files'
        required: false
        default: 'false'
        type: string
      auto_identification_resolve_pending_ids:
        description: 'Automatically resolve pending identifications'
        required: false
        default: 'false'
        type: string
      delta_only:
        description: 'Scan only delta (newly added files from last scan)'
        required: false
        default: 'false'
        type: string
      reuse_identifications:
        description: 'Try to use an existing identification'
        required: false
        default: 'false'
        type: string
      identification_reuse_type:
        description: 'Based on reuse type last identification found will be used for files with the same hash'
        required: false
        default: ''
        type: string
      specific_code:
        description: 'The scan code used for identification reuse'
        required: false
        default: ''
        type: string
      no_advanced_match_scoring:
        description: 'Disable advanced match scoring which by default is enabled'
        required: false
        default: 'false'
        type: string
      match_filtering_threshold:
        description: 'Minimum length, in characters, of the snippet to be considered valid'
        required: false
        default: ''
        type: string
      target_path:
        description: 'The path on the Workbench server where the code to be scanned is stored'
        required: false
        default: ''
        type: string
      chunked_upload:
        description: 'For files bigger than 8 MB uploading will be done using chunked transfer'
        required: false
        default: 'false'
        type: string
      log:
        description: 'Specify logging level. Allowed values: DEBUG, INFO, WARNING, ERROR'
        required: false
        default: 'INFO'
        type: string
      path_result:
        description: 'Save results to specified path'
        required: false
        default: ''
        type: string
      get_scan_identified_components:
        description: 'Return the list of identified components instead of licenses'
        required: false
        default: 'false'
        type: string
      scans_get_policy_warnings_counter:
        description: 'Return information about policy warnings found in this scan'
        required: false
        default: 'false'
        type: string
      projects_get_policy_warnings_info:
        description: 'Return information about policy warnings for project'
        required: false
        default: 'false'
        type: string
name: Workbench Agent Scan

on:
  workflow_call:
    secrets:
      WORKBENCH_URL:
        required: true
      WORKBENCH_USER:
        required: true
      WORKBENCH_TOKEN:
        required: true
    inputs:
      # [inputs as defined before, unchanged]
      # ... your full list of inputs here ...

jobs:
  wb-agent-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Zip Code; Ignoring File Types
        run: |
          zip -r $GITHUB_WORKSPACE/code.zip . -x \
          '*.tmp' '*.temp' '*.bak' \
          '*.cache' '*.db' '*.idx' \
          '*.log' '*.txt' '*.event' \
          '*.sample' '*.demo' '*.example' \
          '*.sql' '*.hprof' '*.dmp' \
          '.gitignore' '.dockerignore' \
          '.git/*' '.github/*'

      - name: Checkout FossID Workbench Agent Repo
        uses: actions/checkout@v4
        with: 
          repository: fossid-ab/workbench-agent
          path: fossid-tools

      - name: Prepare Workbench Agent
        run: pip install -r fossid-tools/requirements.txt

      - name: Run Workbench Agent
        run: |
          COMMAND="python fossid-tools/workbench-agent.py \
            --api_url ${{ secrets.WORKBENCH_URL }} \
            --api_user ${{ secrets.WORKBENCH_USER }} \
            --api_token ${{ secrets.WORKBENCH_TOKEN }} \
            --project_code ${{ inputs.project_code }} \
            --scan_code ${{ inputs.scan_code }} \
            --scan_number_of_tries ${{ inputs.scan_number_of_tries }} \
            --scan_wait_time ${{ inputs.scan_wait_time }} \
            --path $GITHUB_WORKSPACE/code.zip \
            --limit ${{ inputs.limit }} \
            --sensitivity ${{ inputs.sensitivity }}"

          # Boolean flags
          for flag in \
            recursively_extract_archives \
            jar_file_extraction \
            blind_scan \
            run_dependency_analysis \
            run_only_dependency_analysis \
            auto_identification_detect_declaration \
            auto_identification_detect_copyright \
            auto_identification_resolve_pending_ids \
            delta_only \
            reuse_identifications \
            no_advanced_match_scoring \
            chunked_upload \
            get_scan_identified_components \
            scans_get_policy_warnings_counter \
            projects_get_policy_warnings_info; do
            if [ "${{ inputs[$flag] }}" == "true" ]; then
              COMMAND="$COMMAND --$flag"
            fi
          done

          # Flags with values
          declare -A value_flags=(
            [identification_reuse_type]="${{ inputs.identification_reuse_type }}"
            [specific_code]="${{ inputs.specific_code }}"
            [match_filtering_threshold]="${{ inputs.match_filtering_threshold }}"
            [target_path]="${{ inputs.target_path }}"
            [log]="${{ inputs.log }}"
            [path-result]="${{ inputs.path_result }}"
          )

          for key in "${!value_flags[@]}"; do
            value="${value_flags[$key]}"
            if [ -n "$value" ]; then
              COMMAND="$COMMAND --$key $value"
            fi
          done

          # Run the constructed command
          eval "$COMMAND"

