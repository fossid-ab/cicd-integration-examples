# This workflow runs any time code is pushed to a branch.
# By doing so, Branches always have up-to-date results in Workbench.

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'

stages:
  - scan

variables:
  # Set these variables in your GitLab project settings
  # WORKBENCH_URL: "https://your-workbench-instance.com"
  # WORKBENCH_USER: "your-username"
  # WORKBENCH_TOKEN: "your-api-token"
  # QUAY_USER: "your-quay-username"
  # QUAY_TOKEN: "your-quay-token"
  
  # Project and scan naming using GitLab variables
  PROJECT_CODE: $CI_PROJECT_PATH
  SCAN_CODE: $CI_PROJECT_PATH/$CI_COMMIT_REF_NAME

fossid_branch_scan:
  stage: scan
  image:
    name: quay.io/fossid/workbench-agent:0.7.2
    entrypoint: [""]
  
  # Authenticate with Quay registry
  services:
    - name: docker:dind
      alias: docker
  
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  
  before_script:
    # The Workbench Agent works best when an archive is provided for analysis
    - |
      zip -r code.zip . -x \
      '*.tmp' '*.temp' '*.bak' \
      '*.cache' '*.db' '*.idx' \
      '*.log' '*.txt' '*.event' \
      '*.sample' '*.demo' '*.example' \
      '*.sql' '*.hprof' '*.dmp' \
      '.gitignore' '.dockerignore' \
      '.git/*' '.gitlab-ci.yml'
  
  script:
    # Run Workbench Agent with GitLab-specific environment variables
    # In this example, we omit License Extraction to speed up the scan process
    # We use GitLab variables to map Projects and Scans in Workbench to Repos and Branches
    # Additionally, Delta Scan and Identification Reuse are enabled to reduce scan time
    - |
      workbench-agent \
        --api_url $WORKBENCH_URL \
        --api_user $WORKBENCH_USER \
        --api_token $WORKBENCH_TOKEN \
        --project_code $PROJECT_CODE \
        --scan_code $SCAN_CODE \
        --path code.zip \
        --chunked_upload \
        --reuse_identifications \
        --identification_reuse_type specific_project \
        --specific_code $PROJECT_CODE \
        --run_dependency_analysis \
        --delta_only
  
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: always
  
  tags:
    - linux
  
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - code.zip
    reports:
      # Store any generated reports as artifacts
      junit: "*.xml" 