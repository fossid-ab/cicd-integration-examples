# FossID Workbench - Policy Check for Merge Requests
# This workflow runs on merge requests to check for policy violations

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

stages:
  - policy-check

variables:
  # Set these variables in your GitLab project settings
  # WORKBENCH_URL: "https://your-workbench-instance.com"
  # WORKBENCH_USER: "your-username"
  # WORKBENCH_TOKEN: "your-api-token"
  
  # Project and scan naming using GitLab variables
  PROJECT_CODE: $CI_PROJECT_PATH
  SCAN_CODE: $CI_PROJECT_PATH/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME

evaluate_fossid_gates:
  stage: policy-check
  image: python:3.9
  
  before_script:
    - pip install requests
    - git clone https://github.com/fossid-ab/workbench-api-samples.git
  
  script:
    # This will check the Workbench Project/Scan for the source branch
    # to alert if there are pending identifications or policy violations identified
    - |
      python workbench-api-samples/post-scan-gates/post_scan_gates.py \
        --workbench-url $WORKBENCH_URL \
        --workbench-user $WORKBENCH_USER \
        --workbench-token $WORKBENCH_TOKEN \
        --scan-code $SCAN_CODE \
        --show-files \
        --policy-check
  
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
  
  # If policy violations are found, fail the pipeline
  allow_failure: false
  
  tags:
    - linux
  
  artifacts:
    when: always
    expire_in: 1 week
    reports:
      # Store policy check results as artifacts
      junit: "*.xml" 