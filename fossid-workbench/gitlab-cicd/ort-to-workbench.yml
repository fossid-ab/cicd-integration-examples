# Upload ORT Results to Workbench
# This workflow runs ORT's Analyzer then uploads the analyzer-result.json it produces into Workbench

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'  # Manual trigger
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual

stages:
  - analyze
  - upload

variables:
  # Set these variables in your GitLab project settings
  # WORKBENCH_URL: "https://your-workbench-instance.com"
  # WORKBENCH_USER: "your-username"
  # WORKBENCH_TOKEN: "your-api-token"
  
  # Project and scan naming using GitLab variables
  PROJECT_CODE: $CI_PROJECT_PATH
  SCAN_CODE: $CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
  ORT_RESULTS_DIR: "/tmp/ort-results"

run_ort_analysis:
  stage: analyze
  image: 
    name: ort/ort:latest
    entrypoint: [""]
  
  before_script:
    - mkdir -p $ORT_RESULTS_DIR
  
  script:
    # Run ORT Analyzer
    - |
      /opt/ort/bin/ort \
        analyze \
        --input-dir $CI_PROJECT_DIR \
        --output-dir $ORT_RESULTS_DIR \
        --output-formats JSON \
        --allow-dynamic-versions
  
  after_script:
    - |
      echo "ORT analysis completed. Results:"
      ls -la $ORT_RESULTS_DIR
      
      # Verify the analyzer JSON was created
      if [ -f "$ORT_RESULTS_DIR/analyzer-result.json" ]; then
        echo "✅ Analyzer JSON created successfully"
      else
        echo "❌ Analyzer JSON not found"
        exit 1
      fi
  
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
  
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - $ORT_RESULTS_DIR/
    reports:
      # Store ORT results as artifacts
      junit: "$ORT_RESULTS_DIR/*.xml"
  
  tags:
    - linux

upload_ort_results:
  stage: upload
  image: python:3.9
  
  dependencies:
    - run_ort_analysis
  
  before_script:
    - pip install requests
    - git clone https://github.com/fossid-ab/workbench-api-samples.git
  
  script:
    # Upload ORT Results to Workbench using the DA Upload Sample Script
    - |
      python workbench-api-samples/import-da/import-da.py \
        --api-url $WORKBENCH_URL \
        --api-user $WORKBENCH_USER \
        --api-token $WORKBENCH_TOKEN \
        --scan-code $SCAN_CODE \
        --file "$ORT_RESULTS_DIR/analyzer-result.json"
  
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: manual
  
  allow_failure: false
  
  tags:
    - linux 